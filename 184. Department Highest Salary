Table: Employee

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| id           | int     |
| name         | varchar |
| salary       | int     |
| departmentId | int     |
+--------------+---------+
id is the primary key (column with unique values) for this table.
departmentId is a foreign key (reference columns) of the ID from the Department table.
Each row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.
 

Table: Department

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| id          | int     |
| name        | varchar |
+-------------+---------+
id is the primary key (column with unique values) for this table. It is guaranteed that department name is not NULL.
Each row of this table indicates the ID of a department and its name.
 

Write a solution to find employees who have the highest salary in each of the departments.

Return the result table in any order.

The result format is in the following example.

 

Example 1:

Input: 
Employee table:
+----+-------+--------+--------------+
| id | name  | salary | departmentId |
+----+-------+--------+--------------+
| 1  | Joe   | 70000  | 1            |
| 2  | Jim   | 90000  | 1            |
| 3  | Henry | 80000  | 2            |
| 4  | Sam   | 60000  | 2            |
| 5  | Max   | 90000  | 1            |
+----+-------+--------+--------------+
Department table:
+----+-------+
| id | name  |
+----+-------+
| 1  | IT    |
| 2  | Sales |
+----+-------+
Output: 
+------------+----------+--------+
| Department | Employee | Salary |
+------------+----------+--------+
| IT         | Jim      | 90000  |
| Sales      | Henry    | 80000  |
| IT         | Max      | 90000  |
+------------+----------+--------+
Explanation: Max and Jim both have the highest salary in the IT department and Henry has the highest salary in the Sales department.
Solution:
WITH DEPT AS (
    SELECT D.NAME AS DEPARTMENT, E.NAME AS EMPLOYEE, E.SALARY 
    FROM EMPLOYEE E
    JOIN DEPARTMENT D ON E.departmentId = D.ID
), 
EMPL_RANKS AS (
    SELECT DEPARTMENT, EMPLOYEE, SALARY,
           RANK() OVER(PARTITION BY DEPARTMENT ORDER BY SALARY DESC) AS RNK 
    FROM DEPT 
)
SELECT DEPARTMENT, EMPLOYEE, SALARY 
FROM EMPL_RANKS 
WHERE RNK = 1;


import pandas as pd

def department_highest_salary(employee: pd.DataFrame, department: pd.DataFrame) -> pd.DataFrame:
    # Merge the employee and department DataFrames
    dept_df = pd.merge(employee, department, left_on='departmentId', right_on='id', suffixes=('_EMPLOYEE', '_DEPARTMENT'))

    # Calculate ranks based on salary within each department
    dept_df['RNK'] = dept_df.groupby('name_DEPARTMENT')['salary'].rank(method='dense', ascending=False)

    # Filter the DataFrame to select rows where the rank is equal to 1
    result_df = dept_df[dept_df['RNK'] == 1]

    # Select the desired columns
    result_df = result_df[['name_DEPARTMENT', 'name_EMPLOYEE', 'salary']]
    df = result_df.rename(columns={'name_DEPARTMENT': 'Department', 'name_EMPLOYEE': 'Employee'})
    return df


