Table: Customers

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| id          | int     |
| name        | varchar |
+-------------+---------+
id is the primary key (column with unique values) for this table.
Each row of this table indicates the ID and name of a customer.
 

Table: Orders

+-------------+------+
| Column Name | Type |
+-------------+------+
| id          | int  |
| customerId  | int  |
+-------------+------+
id is the primary key (column with unique values) for this table.
customerId is a foreign key (reference columns) of the ID from the Customers table.
Each row of this table indicates the ID of an order and the ID of the customer who ordered it.
 

Write a solution to find all customers who never order anything.

Return the result table in any order.

The result format is in the following example.

 

Example 1:

Input: 
Customers table:
+----+-------+
| id | name  |
+----+-------+
| 1  | Joe   |
| 2  | Henry |
| 3  | Sam   |
| 4  | Max   |
+----+-------+
Orders table:
+----+------------+
| id | customerId |
+----+------------+
| 1  | 3          |
| 2  | 1          |
+----+------------+
Output: 
+-----------+
| Customers |
+-----------+
| Henry     |
| Max       |
+-----------+
Solution:
# Write your MySQL query statement below
SELECT NAME AS CUSTOMERS FROM CUSTOMERS 
WHERE ID NOT IN (
    SELECT CUSTOMERID FROM ORDERS
)
SELECT NAME AS CUSTOMERS FROM 
CUSTOMERS C LEFT JOIN ORDERS O
ON C.ID = O.CUSTOMERID
WHERE O.ID IS NULL

import pandas as pd

def find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:
    merged = pd.merge(customers, orders, how='left', left_on='id', right_on='customerId')
    filtered_merged = merged[merged['customerId'].isna()]
    return filtered_merged[['name']].rename(columns={'name': 'Customers'})
