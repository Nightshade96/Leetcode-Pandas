Table: Employee

+-------------+------+
| Column Name | Type |
+-------------+------+
| id          | int  |
| salary      | int  |
+-------------+------+
id is the primary key (column with unique values) for this table.
Each row of this table contains information about the salary of an employee.
 

Write a solution to find the second highest salary from the Employee table. If there is no second highest salary, return null (return None in Pandas).

The result format is in the following example.

 

Example 1:

Input: 
Employee table:
+----+--------+
| id | salary |
+----+--------+
| 1  | 100    |
| 2  | 200    |
| 3  | 300    |
+----+--------+
Output: 
+---------------------+
| SecondHighestSalary |
+---------------------+
| 200                 |
+---------------------+
Example 2:

Input: 
Employee table:
+----+--------+
| id | salary |
+----+--------+
| 1  | 100    |
+----+--------+
Output: 
+---------------------+
| SecondHighestSalary |
+---------------------+
| null                |
+---------------------+
Solution:
#limit picks up only 1 value and offset lets go of the top value making sure that we get the 2nd highest
SELECT 
    CASE
        WHEN(SELECT COUNT(DISTINCT SALARY) FROM EMPLOYEE ) > 1
            THEN (SELECT DISTINCT SALARY FROM EMPLOYEE
            ORDER BY SALARY DESC
            LIMIT 1 OFFSET 1)
        ELSE
            NULL
    END AS  SecondHighestSalary

import pandas as pd

def second_highest_salary(employee: pd.DataFrame) -> pd.DataFrame:
    # Check if there are multiple distinct salaries
    if employee['salary'].nunique() > 1:
    # Find the second highest salary
        second_highest_salary = employee['salary'].sort_values(ascending=False).unique()[1]
    else:
        second_highest_salary = None
    result_df = pd.DataFrame({'SecondHighestSalary': [second_highest_salary]})

    return result_df
    
